generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String           @id @default(cuid())
  email              String           @unique
  name               String
  password           String
  role               Role             @default(STUDENT)
  classes            UsersOnClasses[]
  submissions        Submission[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  hackerrankUsername String?
  hackerrankCookie     String?          // Session cookie for authenticated API calls
  hackerrankCookieStatus String        @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  gfgUsername        String?
  leetcodeUsername   String?
  leetcodeCookie     String?          // Encrypted session cookie for authenticated API calls
  leetcodeCookieStatus String        @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  leetcodeTotalSolved  Int?           // Cached total problems solved
  leetcodeEasySolved   Int?           // Cached easy problems solved
  leetcodeMediumSolved Int?           // Cached medium problems solved
  leetcodeHardSolved   Int?           // Cached hard problems solved
  taughtClasses      Class[]
  announcements      Announcement[]
  
  // Judge0 API Key Management
  judge0ApiKey       String?          // Encrypted RapidAPI key
  judge0KeyStatus    String           @default("NOT_PROVIDED") // ACTIVE, EXHAUSTED, INVALID, NOT_PROVIDED
  judge0QuotaUsed    Int              @default(0) // Daily usage counter
  judge0LastReset    DateTime?        // Last quota reset timestamp
  
  // Gemini API Key Management (Teachers only)
  geminiApiKey       String?          // Encrypted Gemini API key
  geminiKeyStatus    String           @default("NOT_PROVIDED") // ACTIVE, INVALID, NOT_PROVIDED
  
  // Test-related relationships
  testSessions       TestSession[]
  judge0Keys         Judge0KeyPool[]
}

model Class {
  id          String           @id @default(cuid())
  name        String
  joinCode    String           @unique
  teacher     User             @relation(fields: [teacherId], references: [id])
  teacherId   String
  students    UsersOnClasses[]
  assignments Assignment[]
  announcements Announcement[]
  codingTests CodingTest[]     // New relationship for coding tests
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UsersOnClasses {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  class      Class    @relation(fields: [classId], references: [id])
  classId    String
  assignedAt DateTime @default(now())

  @@id([userId, classId])
}

model Assignment {
  id          String    @id @default(cuid())
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  title       String
  description String?
  assignDate  DateTime
  dueDate     DateTime
  problems    Problem[]
  lastSubmissionCheck DateTime? // When submissions were last checked
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Problem {
  id           String       @id @default(cuid())
  assignment   Assignment   @relation(fields: [assignmentId], references: [id])
  assignmentId String
  title        String
  url          String       
  platform     String
  difficulty   String?
  submissions  Submission[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Submission {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  problem        Problem   @relation(fields: [problemId], references: [id])
  problemId      String
  completed      Boolean   @default(false)
  manuallyMarked Boolean   @default(false) // Student's manual completion marking
  submissionTime DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  content   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New models for coding tests
model CodingTest {
  id              String           @id @default(cuid())
  classId         String
  title           String
  description     String?
  duration        Int              // Duration in minutes
  startTime       DateTime
  endTime         DateTime
  isActive        Boolean          @default(false)
  allowedLanguages Json            // Array of language IDs
  
  // Relationships
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  problems        TestProblem[]
  sessions        TestSession[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TestProblem {
  id              String           @id @default(cuid())
  testId          String
  title           String
  description     String           // Markdown content
  constraints     String?          // Input constraints
  examples        Json             // Example inputs/outputs
  testCases       Json             // Hidden test cases for Judge0
  difficulty      String           // Easy/Medium/Hard
  timeLimit       Int              // Seconds
  memoryLimit     Int              // MB
  order           Int              // Display order
  
  // Relationships
  test            CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  submissions     TestSubmission[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TestSession {
  id              String           @id @default(cuid())
  testId          String
  userId          String
  startedAt       DateTime         @default(now())
  endedAt         DateTime?
  status          TestStatus       @default(IN_PROGRESS)
  penaltyCount    Int              @default(0)
  lastActivity    DateTime         @default(now())
  currentProblemIndex Int          @default(0)
  
  // Relationships
  test            CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions     TestSubmission[]
  penalties       TestPenalty[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([testId, userId]) // One session per user per test
}

model TestSubmission {
  id              String           @id @default(cuid())
  sessionId       String
  problemId       String
  code            String
  language        String
  status          SubmissionStatus @default(PENDING)
  score           Int?             // 0-100
  executionTime   Int?             // Milliseconds
  memoryUsed      Int?             // KB
  judgeOutput     Json?            // Judge0 response
  judgeToken      String?          // Judge0 submission token
  
  // Relationships
  session         TestSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  problem         TestProblem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TestPenalty {
  id              String           @id @default(cuid())
  sessionId       String
  type            PenaltyType
  description     String
  timestamp       DateTime         @default(now())
  
  // Relationships
  session         TestSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
}

model Judge0KeyPool {
  id            String   @id @default(cuid())
  userId        String   @unique // Owner of the key (unique - one key per user in pool)
  encryptedKey  String   // Encrypted API key
  status        String   @default("ACTIVE") // ACTIVE, EXHAUSTED, INVALID, SUSPENDED
  dailyUsage    Int      @default(0)
  dailyLimit    Int      @default(50) // Free tier limit
  lastUsed      DateTime?
  lastReset     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  TERMINATED
  ABANDONED
}

enum SubmissionStatus {
  PENDING
  JUDGING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  SYSTEM_ERROR
}

enum PenaltyType {
  TAB_SWITCH
  FULLSCREEN_EXIT
  VISIBILITY_CHANGE
  COPY_ATTEMPT
  PASTE_ATTEMPT
  FOCUS_LOST
  SUSPICIOUS_ACTIVITY
}

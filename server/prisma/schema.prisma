generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  binaryTargets   = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String           @id @default(cuid())
  email                  String           @unique
  name                   String
  password               String
  role                   Role             @default(STUDENT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  hackerrankUsername     String?
  hackerrankCookie       String?          // Session cookie for authenticated API calls
  hackerrankCookieStatus String           @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  gfgUsername            String?
  leetcodeUsername       String?
  leetcodeCookie         String?          // Encrypted session cookie for authenticated API calls
  leetcodeCookieStatus   String           @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  leetcodeTotalSolved    Int?           // Cached total problems solved
  leetcodeEasySolved     Int?           // Cached easy problems solved
  leetcodeMediumSolved   Int?           // Cached medium problems solved
  leetcodeHardSolved     Int?           // Cached hard problems solved
  judge0ApiKey           String?          // Encrypted RapidAPI key
  judge0KeyStatus        String           @default("NOT_PROVIDED") // ACTIVE, EXHAUSTED, INVALID, NOT_PROVIDED
  judge0QuotaUsed        Int              @default(0) // Daily usage counter
  judge0LastReset        DateTime?        // Last quota reset timestamp
  geminiApiKey           String?          // Encrypted Gemini API key
  geminiKeyStatus        String           @default("NOT_PROVIDED") // ACTIVE, INVALID, NOT_PROVIDED
  announcements          Announcement[]
  taughtClasses          Class[]
  judge0Keys             Judge0KeyPool?   // Fixed: Single relation to match actual database
  submissions            Submission[]
  testSessions           TestSession[]
  classes                UsersOnClasses[]
}

model Class {
  id            String           @id @default(cuid())
  name          String
  joinCode      String           @unique
  teacherId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  announcements Announcement[]
  assignments   Assignment[]
  teacher       User             @relation(fields: [teacherId], references: [id])
  codingTests   CodingTest[]
  students      UsersOnClasses[]
}

model UsersOnClasses {
  userId     String
  classId    String
  assignedAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, classId])
}

model Assignment {
  id                  String    @id @default(cuid())
  classId             String
  title               String
  description         String?
  assignDate          DateTime
  dueDate             DateTime
  lastSubmissionCheck DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  class               Class     @relation(fields: [classId], references: [id])
  problems            Problem[]
}

model Problem {
  id           String       @id @default(cuid())
  assignmentId String
  title        String
  url          String
  platform     String
  difficulty   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignment   Assignment   @relation(fields: [assignmentId], references: [id])
  submissions  Submission[]
}

model Submission {
  id             String    @id @default(cuid())
  userId         String
  problemId      String
  completed      Boolean   @default(false)
  manuallyMarked Boolean   @default(false)
  submissionTime DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  problem        Problem   @relation(fields: [problemId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
}

model Announcement {
  id        String   @id @default(cuid())
  content   String
  classId   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model CodingTest {
  id               String        @id @default(cuid())
  classId          String
  title            String
  description      String?
  duration         Int
  startTime        DateTime
  endTime          DateTime
  isActive         Boolean       @default(false)
  allowedLanguages Json
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  class            Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  problems         TestProblem[]
  sessions         TestSession[]
}

model TestProblem {
  id          String           @id @default(cuid())
  testId      String
  title       String
  description String
  constraints String?
  examples    Json
  testCases   Json
  difficulty  String
  timeLimit   Int
  memoryLimit Int
  order       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  test        CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  submissions TestSubmission[]
}

model TestSession {
  id                  String           @id @default(cuid())
  testId              String
  userId              String
  startedAt           DateTime         @default(now())
  endedAt             DateTime?
  status              TestStatus       @default(IN_PROGRESS)
  penaltyCount        Int              @default(0)
  lastActivity        DateTime         @default(now())
  currentProblemIndex Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  penalties           TestPenalty[]
  test                CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions         TestSubmission[]

  @@unique([testId, userId])
}

model TestSubmission {
  id            String           @id @default(cuid())
  sessionId     String
  problemId     String
  code          String
  language      String
  status        SubmissionStatus @default(PENDING)
  score         Int?
  executionTime Int?
  memoryUsed    Int?
  judgeOutput   Json?
  judgeToken    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  problem       TestProblem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  session       TestSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model TestPenalty {
  id          String      @id @default(cuid())
  sessionId   String
  type        PenaltyType
  description String
  timestamp   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  session     TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Judge0KeyPool {
  id           String    @id @default(cuid())
  userId       String    @unique
  encryptedKey String
  status       String    @default("ACTIVE")
  dailyUsage   Int       @default(0)
  dailyLimit   Int       @default(50)
  lastUsed     DateTime?
  lastReset    DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  TEACHER
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  TERMINATED
  ABANDONED
}

enum SubmissionStatus {
  PENDING
  JUDGING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  SYSTEM_ERROR
}

enum PenaltyType {
  TAB_SWITCH
  FULLSCREEN_EXIT
  VISIBILITY_CHANGE
  COPY_ATTEMPT
  PASTE_ATTEMPT
  FOCUS_LOST
  SUSPICIOUS_ACTIVITY
}
